#lang racket

(define has-target? (lambda (List s1 s2 s3 t1 t2 t3) 
  (cond
    [(null? List)
     (and
       (=  s1 t1)
       (=  s2 t2)
       (=  s3 s1)
       (=  s3 s2)
      )]
    [else
     (or
      ;(has-target? (cdr List)  (+ (car List) s1) s2 s3 t1 t2 t3 )
      ;(has-target? (cdr List)  s1 (+ (car List) s2) s3 t1 t2 t3)
      ;(has-target? (cdr List)  s1 s2 (car List) t1 t2 t3)

      (has-target? (cdr List) s1 (+ (car List) s2) s3 (+ (car List) s2) t2 t3)
      (has-target? (cdr List) (+ (car List) s1) s2 s3 t1 (+ (car List) s1) t3)
      (has-target? (cdr List) s1 s2 (car List)  t1 t2 (car List))
      )
     ]
 )))

;(has-target? '(1 1 2) 0 0 0 0 0 0) 
;(has-target? '(1 1 2 2) 0 0 0 0 0 0) 
;(has-target? '(2 1 3 9 4 8) 0 0 0 0 0 0)
;(has-target? '(5 6 7) 0 0 0 0 0 0)
;(has-target? '(17 35 1 26 24 12 25 40 33 31) 0 0 0 0 0 0)
;(has-target? '(6 21 28 84 66 1000 53 73 38 29 81 66 69 54 8 94) 0 0 0 0 0 0)